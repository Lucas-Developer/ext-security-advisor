<?php
// Copyright 1999-2016. Parallels IP Holdings GmbH.
?>
<?php echo $this->renderTabs($this->tabs); ?>
<?php echo $this->renderList($this->list); ?>
<div class="list">
    <table><tr>
    <?php foreach (['invalid', 'letsencrypt', 'ok'] as $status): ?>
    <td>
        <img src="<?php echo pm_Context::getBaseUrl() . "/images/ssl-{$status}.png" ?>">
        <?php echo $this->lmsg('list.domains.status' . ucfirst($status)) ?>
    </td>
    <?php endforeach ?>
    </tr></table>
</div>
<script>
    Jsw.onReady(function () {
        var list = Jsw.getComponent('<?= $this->list->getId() ?>');
        list._clearStatusOnReload = false;
        var progress = <?= json_encode($this->progress) ?>;
        var pe = new PeriodicalExecuter(function () {
            new Ajax.Request("<?= pm_Context::getActionUrl('index', 'progress-data') ?>", {
                method: 'get',
                onSuccess: function (transport) {
                    var data = transport.responseText.evalJSON();
                    var isDataChanged = JSON.stringify(data) !== JSON.stringify(progress);
                    progress = data;
                    render();
                    if (isDataChanged) {
                        list.reload();
                    }
                }
            });
        }, 1);

        function closeMessage(status, id) {
            new Ajax.Request("<?= pm_Context::getActionUrl('index', 'close-message') ?>", {
                method: 'post',
                parameters: {
                    status: status,
                    id: id
                }
            });
        }

        function render() {
            Jsw.clearStatusMessages();
            var inProgressMsgBox = $('letsencrypt-in-progress-msg-box');
            inProgressMsgBox && inProgressMsgBox.remove();

            if (progress.progress == 100) {
                pe.stop();
            } else {
                var inProgress = "<?= $this->lmsg('controllers.letsencrypt.inProgressMsg') ?>";
                inProgress = inProgress.replace('%%progress%%', parseInt(progress.progress));
                Jsw.addStatusMessage('progress', inProgress, {
                    id: 'letsencrypt-in-progress-msg-box',
                    closable: true,
                    onClose: function () {
                        pe.stop();
                        this.up('.msg-box').remove();
                        closeMessage('any');
                    }
                });
            }

            if (Object.keys(progress.domains).length) {
                var domains = Object.keys(progress.domains).map(function (domainId) {
                    var domain = progress.domains[domainId].escapeHTML();
                    return "<a href='https://" + domain + "' target='_blank'>" + domain + "</a>";
                });
                var message = "<?= $this->lmsg('controllers.domains-list.free-ssl.successMsg') ?>";
                message = message.replace('%%domains%%', domains.join(', '));
                Jsw.addStatusMessage('info', message, {
                    closable: !inProgress,
                    onClose: function () {
                        this.up('.msg-box').remove();
                        closeMessage('done')
                    }
                });
            }

            if (Object.keys(progress.errors).length) {
                Object.keys(progress.errors).forEach(function (domainId) {
                    var error = progress.errors[domainId].escapeHTML();
                    var errorMessage = "<pre>" + error + "</pre>";
                    Jsw.addStatusMessage('error', errorMessage, {
                        closable: true,
                        onClose: function () {
                            this.up('.msg-box').remove();
                            closeMessage('error', domainId)
                        }
                    });
                });
            }
        }

        render();

        <?php if ($this->showSymantecPromotion): ?>
            function purchaseClick(event) {
                if (this.classList.contains('disabled')) {
                    event.preventDefault();
                    return;
                }

                if (<?=$this->isSymantecInstalled ? 'false' : 'true'?>) {
                    // Symantec is not installed
                    $$('div.sw-purchase a').each(function (a) {
                        a.classList.add('disabled');
                        a.update('<span class="ajax-loading">' + a.textContent + '</span>');
                    });
                    event.preventDefault();
                    var purchaseButton = this;
                    new Ajax.Request(<?=$this->jsHtml($this->baseUrl)?> + 'index.php/index/install-symantec', {
                        method: 'post',
                        onSuccess: function () {
                            window.location.href = purchaseButton.href;
                        }
                    });
                }
            }

            $$('div.sw-purchase').each(function (div) {
                if (div.classList.contains('purchase')) {
                    text = div.classList.contains('extended')
                        ? <?=$this->jsHtml($this->lmsg('list.symantec.button.purchaseExtended'))?>
                        : <?=$this->jsHtml($this->lmsg('list.symantec.button.purchase'))?>;
                    var domainId = div.id.split(':')[1];
                    var purchaseButton = new Element('a', {
                        id: 'sw-purchase-button:' + domainId,
                        'class': 'sw-purchase-button',
                        href: <?=$this->jsHtml($this->baseUrl)?> + 'index.php/index/symantec/domain/' + domainId,
                        title: <?=$this->jsHtml($this->lmsg('list.symantec.button.purchaseHint'))?>
                    }).update('<i class="sw-icon-basket"></i>' + text);
                    div.insert({top: purchaseButton});
                    purchaseButton.on('click', purchaseClick.bind(purchaseButton));
                }
            });
        <?php endif ?>
    });
</script>
